#!/bin/bash

# Variables for SNMP credentials and target IP
SNMP_USER="myuser"
SNMP_AUTH_PROTOCOL="SHA"
SNMP_AUTH_PASSWORD="mypassword"
SNMP_PRIV_PROTOCOL="AES"
SNMP_PRIV_PASSWORD="myencryptionpassword"
TARGET_IP="192.168.100.2"
SNMP_OID="iso.3.6.1.6.3.10.2.1.1.0"
SNMP_SET_OID="iso.3.6.1.2.1.1.5.0"  # OID for system name (can change as needed)
SNMP_SET_VALUE="engine"  # Value to set for the SNMP SET command

# Temporary file for storing captured packets
TCPDUMP_FILE="/tmp/snmp_traffic.pcap"

# Run tcpdump to capture raw packets
echo "Capturing SNMP traffic with tcpdump..."
sudo tcpdump -i any udp port 161 -w "$TCPDUMP_FILE" &

# Get the process ID (PID) of tcpdump to stop it later
TCPDUMP_PID=$!

# Run the SNMP GET command to retrieve the engine ID
echo "Running snmpget to retrieve the engine ID..."
ENGINE_ID=$(snmpget -v3 -l authPriv -u "$SNMP_USER" -a "$SNMP_AUTH_PROTOCOL" -A "$SNMP_AUTH_PASSWORD" -x "$SNMP_PRIV_PROTOCOL" -X "$SNMP_PRIV_PASSWORD" "$TARGET_IP" "$SNMP_OID" | grep -oP '(?<=EngineID: ).*')

# Check if we got a valid engine ID
if [[ -z "$ENGINE_ID" ]]; then
    echo "Failed to retrieve the engine ID. Exiting."
    sudo kill $TCPDUMP_PID  # Stop tcpdump
    exit 1
fi

# Clean up engine ID (remove spaces and format correctly)
ENGINE_ID=$(echo "$ENGINE_ID" | tr -d '[:space:]')

echo "Retrieved Engine ID: $ENGINE_ID"

# Stop the tcpdump process
sudo kill $TCPDUMP_PID

# Convert the raw packet capture to human-readable format using tshark
echo "Converting captured packets to human-readable format using tshark..."
tshark -r "$TCPDUMP_FILE" -V

# Run the SNMP SET command using the retrieved engine ID
echo "Running snmpset to update the value..."
snmpset -v3 -u "$SNMP_USER" -l authPriv -a "$SNMP_AUTH_PROTOCOL" -A "$SNMP_AUTH_PASSWORD" -x "$SNMP_PRIV_PROTOCOL" -X "$SNMP_PRIV_PASSWORD" -e "$ENGINE_ID" "$TARGET_IP" "$SNMP_SET_OID" s "$SNMP_SET_VALUE"

echo "SNMP SET command executed successfully."

# Clean up the temporary pcap file
rm "$TCPDUMP_FILE"
